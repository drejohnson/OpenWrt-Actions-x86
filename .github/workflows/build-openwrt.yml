#=================================================
# Description: x86 OpenWrt build using GitHub Actions
# Lisence: MIT
# Author: Dre Johnson dre@phreshr.com
#=================================================

name: OpenWrt x86 Build

on:
  push:
    branches:
      - master
    paths:
      - '.github/workflows/build-openwrt.yml'
      - '.config.default'
      - '.config.passwall'

#  schedule:
#    - cron: 0 8 * * 5

env:
  REPO_URL: https://git.openwrt.org/openwrt/openwrt.git
  REPO_BRANCH: master
  CONFIG_FILE: .config
  DIY_SH: diy.sh
  PASSWALL: true
  GITHUB_USER_NAME: drejohnson
  GITHUB_USER_EMAIL: ${{ secrets.EMAIL }}
  GITHUB: https://github.com/drejohnson/OpenWrt-Actions-x86.git
  UPLOAD_BIN_DIR: false
  UPLOAD_FIRMWARE: true
  UPLOAD_WETRANSFER: false
  CREATE_RELEASE: true
  TZ: Asia/Shanghai

jobs:
  build:
    runs-on: ubuntu-latest
    if: github.event.repository.owner.id == github.event.sender.id

    steps:
    - name: Checkout
      uses: actions/checkout@main

    - name: Initialization environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc
        sudo -E apt-get -qq update
        sudo -E apt-get -qq install $(curl -fsSL git.io/depends-ubuntu-2004)
        sudo -E apt-get -qq autoremove --purge
        sudo -E apt-get -qq clean
        sudo timedatectl set-timezone "$TZ"
        sudo mkdir -p /workdir
        sudo chown $USER:$GROUPS /workdir

    - name: Clone source code
      working-directory: /workdir
      run: |
        df -hT $PWD
        git clone --depth 1 $REPO_URL openwrt
        ln -sf /workdir/openwrt $GITHUB_WORKSPACE/openwrt
        cd openwrt
        useVersionInfo=$(git show -s --date=short --format="Author: %an<br/>Date: %cd<br/>Commit: %s")
        echo "::set-env name=useVersionInfo::$useVersionInfo"
        echo "::set-env name=DATE::$(TZ=UTC-8 date "+%Y%m%d")"
        echo "::set-env name=RELEASE_DATE::$(TZ=UTC-8 date "+%Y-%m-%d")"

    # Main Patch
    - name: Run Patch
      run: |
        cp main.patch ./openwrt && cd ./openwrt && patch -p1 < main.patch

    - name: Update and install feeds
      run: | 
        cd openwrt
        ./scripts/feeds update -a
        ./scripts/feeds install -a

    # PassWall Config
    - name: Passwall packages and config
      if: env.PASSWALL == 'true'
      run: |
        cd openwrt
        git clone https://github.com/kuoruan/openwrt-upx.git package/openwrt-upx
        git clone https://github.com/Lienol/openwrt-package package/lienol
        cp -f $GITHUB_WORKSPACE/.config.passwall $GITHUB_WORKSPACE/.config

    # Default Config
    - name: Default config
      if: env.PASSWALL != 'true'
      run: |
        cd openwrt
        cp -f $GITHUB_WORKSPACE/.config.default $GITHUB_WORKSPACE/.config

    - name: Load custom configuration
      run: |
        [ -e $CONFIG_FILE ] && mv $CONFIG_FILE openwrt/.config
        chmod +x $DIY_SH
        cd openwrt
        git clone https://github.com/jerrykuku/luci-theme-argon.git package/luci-theme-argon
        $GITHUB_WORKSPACE/$DIY_SH

    - name: Initialize config
      id: package
      run: |
        cd openwrt
        make defconfig
        make -j8 download V=s
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;

    # Compile UPX
    - name: Compile UPX
      if: env.PASSWALL == 'true'
      run: |
        cd openwrt
        make toolchain/install V=s
        make package/upx/{clean,compile} V=s

    - name: Compile the firmware
      id: compile
      run: |
        cd openwrt
        echo -e "$(nproc) thread compile"
        make -j1 V=s
        echo "::set-output name=status::success"
        grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/' > DEVICE_NAME
        [ -s DEVICE_NAME ] && echo "::set-env name=DEVICE_NAME::_$(cat DEVICE_NAME)"
        echo "::set-env name=FILE_DATE::_$(date +"%Y%m%d%H%M")"

    - name: Check space usage
      if: (!cancelled())
      run: df -hT

    - name: Organize files
      id: organize
      if: steps.compile.outputs.status == 'success' && env.UPLOAD_FIRMWARE == 'true' && !cancelled()
      run: |
        cd openwrt/bin/targets/*/*
        rm -rf packages
        echo "::set-env name=FIRMWARE::$PWD"
        echo "::set-output name=status::success"

    - name: Upload firmware directory
      uses: actions/upload-artifact@main
      if: steps.organize.outputs.status == 'success' && !cancelled()
      with:
        name: OpenWrt_firmware${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
        path: ${{ env.FIRMWARE }}

    - name: Generate Tag
      id: tag
      if: steps.compile.outputs.status == 'success' && env.CREATE_RELEASE == 'true' && !cancelled()
      run: |
        echo ::set-env name=RELEASE_TAG::"$(TZ=UTC-8 date +"%Y-%m-%d")"
        echo "::set-output name=status::success"
    
    - name: Upload Firmware To Release
      uses: softprops/action-gh-release@v1
      if: steps.tag.outputs.status == 'success' && !cancelled()
      env:
        GITHUB_TOKEN: ${{ secrets.RELEASE_TOKEN }}
      with:
        name: x86 ${{ env.BRANCH }} ðŸš€ | Automatic compilation / ${{ env.RELEASE_TAG }}
        tag_name: ${{ env.RELEASE_DATE }}
        body: |            
            1. This firmware is automatically compiled
            2. Only complete firmware is provided in the release
            3. Source Codeï¼š${{ env.REPO_URL }}
            -- Build by ${{ env.GITHUB_USER_NAME }} @ with Github Action on ${{ env.RELEASE_DATE }}
            ðŸš€ Auto build           
            ${{ env.useVersionInfo }}
            ${{ github.event.commits[0].message }}
        files: ${{ env.FIRMWARE }}/*